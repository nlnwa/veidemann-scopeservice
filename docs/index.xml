<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Overview on Veidemann Scope Service</title><link>https://nlnwa.github.io/veidemann-scopeservice/</link><description>Recent content in Overview on Veidemann Scope Service</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 17 Mar 2021 10:15:16 +0100</lastBuildDate><atom:link href="https://nlnwa.github.io/veidemann-scopeservice/index.xml" rel="self" type="application/rss+xml"/><item><title>Constants</title><link>https://nlnwa.github.io/veidemann-scopeservice/scopechecker/script/constants/</link><pubDate>Wed, 17 Mar 2021 15:34:11 +0100</pubDate><guid>https://nlnwa.github.io/veidemann-scopeservice/scopechecker/script/constants/</guid><description>Starlark built in constants Starlark defines fundamental values and functions needed by all Starlark programs like None, True and False. The complete list of Starlark built in constants and functions can be found here.
Status Scope Checker defines a number of constants to be used as result of scope evaluation. The different statuses corresponds to the special status codes used in Veidemann logs which in turn is an extended set of Heritrix status codes.</description></item><item><title>Functions</title><link>https://nlnwa.github.io/veidemann-scopeservice/scopechecker/script/functions/</link><pubDate>Wed, 17 Mar 2021 15:34:11 +0100</pubDate><guid>https://nlnwa.github.io/veidemann-scopeservice/scopechecker/script/functions/</guid><description>In addition to Starlarks built in functions, Scope Checker defines a number of functions needed for building scope evaluation scripts.
param(name) Returns a named parameter from the Candidate URL as a String. abort() End script evaluation and return the current Status set by either an explicit call to setStatus(). getStatus() Returns the currently set Status value. setStatus(status) Set the Status value to be returned by the script when evaluation ends.</description></item><item><title>Matchers</title><link>https://nlnwa.github.io/veidemann-scopeservice/scopechecker/script/matchers/</link><pubDate>Wed, 17 Mar 2021 15:34:11 +0100</pubDate><guid>https://nlnwa.github.io/veidemann-scopeservice/scopechecker/script/matchers/</guid><description>test(match=False) Returns a Match object with the same True/False value. isScheme(scheme) Takes a space separated string of schemes and checks if the Uri candidate has a scheme matching one of them. Returns a True Match value if the URI has the submitted scheme. isReferrer(referrer) Space separated string with referrer urls isSameHost(includeSubdomains=False) Returns a True Match value if the Candidate URL has the same domain as its seed.</description></item><item><title>Types</title><link>https://nlnwa.github.io/veidemann-scopeservice/scopechecker/script/types/</link><pubDate>Wed, 17 Mar 2021 10:07:20 +0100</pubDate><guid>https://nlnwa.github.io/veidemann-scopeservice/scopechecker/script/types/</guid><description>UrlValue urlValue.host() Returns a string with the host part of the Url urlValue.port() Returns a string with the port part of the Url Match All built in matching functions returns a Match object. The Match object has the value True or False and can be used everywhere a boolean is expected. The difference is that the Match object has a few convenient built in methods to make scripts more compact.</description></item></channel></rss>