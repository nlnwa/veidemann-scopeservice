[{"uri":"https://nlnwa.github.io/veidemann-scopeservice/scopechecker/script/constants/","title":"Constants","tags":[],"description":"","content":"Starlark built in constants Starlark defines fundamental values and functions needed by all Starlark programs like None, True and False. The complete list of Starlark built in constants and functions can be found here.\nStatus Scope Checker defines a number of constants to be used as result of scope evaluation. The different statuses corresponds to the special status codes used in Veidemann logs which in turn is an extended set of Heritrix status codes.\nInclude   Candidate URI is in scope. The status code will be the result of fetching the actual resource. Blocked   Candidate URL is blocked from fetch. Status code is -5001. BlockedByCustomProcessor   Blocked by a custom processor. Status code is -5002. ChaffDetection   Chaff detection of traps/content with negligible value applied. Status code is -4000. IllegalUri   Candidate URI is unsupported or has illegal format. Status code is -7. RuntimeException   Evaluation of script failed. Status code is -5. TooManyHops   Candidate URL was too many hops away from seed. Status code is -4001. TooManyTransitiveHops   The URI is too many embed/transitive hops away from the last URI in scope. Status code is -4002. "},{"uri":"https://nlnwa.github.io/veidemann-scopeservice/scopechecker/script/functions/","title":"Functions","tags":[],"description":"","content":"In addition to Starlarks built in functions, Scope Checker defines a number of functions needed for building scope evaluation scripts.\nparam(name)   Returns a named parameter from the Candidate URL as a String. abort()   End script evaluation and return the current Status set by either an explicit call to setStatus(). getStatus()   Returns the currently set Status value. setStatus(status)   Set the Status value to be returned by the script when evaluation ends. debug(boolean)   Turn on/of debugging. "},{"uri":"https://nlnwa.github.io/veidemann-scopeservice/scopechecker/script/matchers/","title":"Matchers","tags":[],"description":"","content":"test(match=False)   Returns a Match object with the same True/False value. isScheme(scheme)   Takes a space separated string of schemes and checks if the Uri candidate has a scheme matching one of them. Returns a True Match value if the URI has the submitted scheme. isReferrer(referrer)   Space separated string with referrer urls isSameHost(includeSubdomains=False)   Returns a True Match value if the Candidate URL has the same domain as its seed.\nIf includeSubdomains=True then the Candidate URL might have a subdomain of the Seeds domain.\n maxHopsFromSeed(hops, includeRedirects=False)    isUrl(url)   Space separated string with urls\nisUrl(\u0026quot;http://example.com\u0026quot;)  "},{"uri":"https://nlnwa.github.io/veidemann-scopeservice/scopechecker/api/","title":"Api","tags":[],"description":"","content":"The Scope Service exposes a gRPC API.\n"},{"uri":"https://nlnwa.github.io/veidemann-scopeservice/scopechecker/script/","title":"Script","tags":[],"description":"","content":"Scope scripts are written in Starlark, a dialect of Python. In most cases it is not necessary to know Python or Starlark to write Scope scripts because we have built in a number of functions which do most of the heavy lifting.\nExample:\nisScheme(param('scope_allowedSchemes')).otherwise(Blocked) isSameHost(param('scope_includeSubdomains'), altSeeds=param('scope_altSeeds')).then(Include, continueEvaluation=True).otherwise(Blocked, continueEvaluation=False) maxHopsFromSeed(param('scope_maxHopsFromSeed'), param('scope_hopsIncludeRedirects')).then(TooManyHops) isUrl(param('scope_excludedUris')).then(Blocked) This could also be written like you would do in Python:\nif not isScheme(param('scope_allowedSchemes')): setStatus(Blocked) abort() if isSameHost(param('scope_includeSubdomains'), altSeeds=param('scope_altSeeds')): setStatus(Include) else: setStatus(Blocked) abort() if maxHopsFromSeed(param('scope_maxHopsFromSeed'), param('scope_hopsIncludeRedirects')): setStatus(TooManyHops) abort() if isUrl(param('scope_excludedUris')): setStatus(Blocked) abort() "},{"uri":"https://nlnwa.github.io/veidemann-scopeservice/","title":"Overview","tags":[],"description":"","content":"Overview The Scope Service is a part of the Veidemann harvester. Veidemann uses gRPC for communication between services. The veidemann-api repository contains protobuf definitions for all services in Veidemann.\nUsage Stubs are generated for Java and Go.\nJava Usage from Java: maven gradle sbt leiningen   Add repository to pom.xml  \u0026lt;repositories\u0026gt; \u0026lt;repository\u0026gt; \u0026lt;id\u0026gt;jitpack.io\u0026lt;/id\u0026gt; \u0026lt;url\u0026gt;https://jitpack.io\u0026lt;/url\u0026gt; \u0026lt;/repository\u0026gt; \u0026lt;/repositories\u0026gt; Add the dependency  \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.github.nlnwa\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;veidemann-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;Tag\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;    Add repository in your root build.gradle at the end of repositories:  allprojects { repositories { ... maven { url \u0026#39;https://jitpack.io\u0026#39; } } } Add the dependency  dependencies { implementation \u0026#39;com.github.nlnwa:veidemann-api:Tag\u0026#39; }   Add repository in your build.sbt at the end of resolvers:\nresolvers += \u0026#34;jitpack\u0026#34; at \u0026#34;https://jitpack.io\u0026#34;\\ Add the dependency  libraryDependencies += \u0026#34;com.github.nlnwa\u0026#34; % \u0026#34;veidemann-api\u0026#34; % \u0026#34;Tag\u0026#34;   Add repository in your project.clj at the end of repositories:\n:repositories [[\u0026quot;jitpack\u0026quot; \u0026quot;https://jitpack.io\u0026quot;]] Add the dependency  :dependencies [[com.github.nlnwa/veidemann-api \u0026quot;Tag\u0026quot;]]     Go To use the service from Go:\ngo get github.com/nlnwa/veidemann-api/go Services The Scope Service implements two of Veidemann\u0026rsquo;s interfaces.\n Scope checker service URI canonicalization service  "},{"uri":"https://nlnwa.github.io/veidemann-scopeservice/scopechecker/","title":"Scope checker","tags":[],"description":"","content":"The Scope Checker Service is responsible for determining if a URL should be harvested or not. The service is stateless and gets all the information it needs in the request including context metadata and a script which does the evaluation.\n API Script  "},{"uri":"https://nlnwa.github.io/veidemann-scopeservice/uricanonicalizer/","title":"URI canonicalizer","tags":[],"description":"","content":"The URI canonicalizer is a service which parses a URI, does some normalization and returns a structured object similar to the URL object in browsers. The motivation for having this as a service is to ensure that URIs are parsed and normalized in the same way independently of programming language, configuration and so on.\nCanoncalization The canoncalization is (for now) configured in code and tries to not change the URIs semantics. Examples of canoncalization are:\n Remove port numbers for well known schemes (i.e. http://example.com:80 → http://example.com) Normalize slash for empty path (i.e. http://example.com → http://example.com/) Normalize path (i.e. http://example.com/a//b/./c → http://example.com/a/b/c) Remove user info (i.e. http://user:passwd@example.com → http://example.com/) Sort query (i.e. http://example.com/foo?b=2\u0026amp;a=3\u0026amp;c=4\u0026amp;b=1/ → http://example.com/foo?a=3\u0026amp;b=2\u0026amp;b=1\u0026amp;c=4) Only the query parameter names are sorted. This is less likely to alter semantics than also sort values.\n   API The API is implemented as a gRPC service.\nThe request is the URI a as string.\nThe respones is a ParsedUri object defined as follows:\nmessage ParsedUri { // The entire uri  string href = 1; // The scheme (protocol) part of the uri  string scheme = 2; // The hostname of the uri  string host = 3; // The port number of the uri  int32 port = 4; // The username part of the uri  string username = 5; // The password part of the uri  string password = 6; // The path part of the uri  string path = 7; // The query (search) part of the uri  string query = 8; // The fragment (hash) part of the uri  string fragment = 9;}"},{"uri":"https://nlnwa.github.io/veidemann-scopeservice/scopechecker/script/types/","title":"Types","tags":[],"description":"","content":"UrlValue urlValue.host()   Returns a string with the host part of the Url urlValue.port()   Returns a string with the port part of the Url Match All built in matching functions returns a Match object. The Match object has the value True or False and can be used everywhere a boolean is expected. The difference is that the Match object has a few convenient built in methods to make scripts more compact.\nTo turn a boolean into a Match object, you can use the Test() method\nmatch.then(status, continueEvaluation=False)   Sets the submitted Status as the script response if match is True. If continueEvaluation (optional parameter) is True, then the script evaluation continues.\nTypical use:\nisScheme(\u0026quot;mailto\u0026quot;).then(Blocked) Which is equivalent to:\nif isScheme(\u0026quot;mailto\u0026quot;): setStatus(Blocked) abort() match.then() returns the same match object so that it can be chained with otherwise to form an if-then-else expression.\nisScheme(\u0026quot;mailto\u0026quot;).then(Blocked).otherwise(Include, continueEvaluation=True) Which is equivalent to:\nif isScheme(\u0026quot;mailto\u0026quot;): setStatus(Blocked) abort() else: setStatus(Include)  match.otherwise(status, continueEvaluation=False)   Sets the script response status if match is False. If continueEvaluation is False, then the script returns.\nTypical use:\nisScheme('http').otherwise(Blocked) Which is equivalent to:\nif not isScheme(\u0026quot;http\u0026quot;): setStatus(Blocked) abort()  "},{"uri":"https://nlnwa.github.io/veidemann-scopeservice/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://nlnwa.github.io/veidemann-scopeservice/tags/","title":"Tags","tags":[],"description":"","content":""}]